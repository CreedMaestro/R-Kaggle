fit.xgb <- xgb.train(data=dtrain,
params = default_param,
nrounds = results[['nrounds']][min.index],
seed = 4018)
predictions_xgb <- exp(predict(fit.xgb, dtest))
head(predictions_xgb)
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated','city') #제거할 변수
cat_vars <- c('waterfront', 'Yrmbuy', 'zipcode','mecity','IsNew','condition','Remod','view','grade','floors',  'TotalRooms') # 가져갈 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
X_test <- model.matrix(~.-1, data = cbind(X_test_num, k_all[is.na(k_all$price), cat_vars, with=F]))
Y_train <- log(k_all[!is.na(k_all$price), price])
RMSE_exp <- function (data, lev = NULL, model = NULL) {
out <- sqrt(mean((exp(data$obs) - exp(data$pred))^2))
names(out) <- "RMSE_exp"
out
}
set.seed(0418)
k_control <- trainControl(method = 'cv', number = 5, summaryFunction = RMSE_exp)
tuneGrid <- expand.grid(alpha = 1, lambda = c(0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1))
fit.lasso <- train(x = as.matrix(X_train), y= Y_train,
method = 'glmnet',
metric = 'RMSE',
maximize = FALSE,
trControl = k_control,
tuneGrid = tuneGrid)
fit.lasso
fit.lasso$bestTune
min(fit.lasso$results$RMSE_exp)
cat_vars <- c('waterfront', 'Yrmbuy', 'zipcode','city','IsNew','condition','Remod','view','grade','floors',  'TotalRooms') # 가져갈 변수
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated') #제거할 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
summarise(k_all)
summary(k_all)
str(k_all)
cat_vars <- c('waterfront', 'Yrmbuy', 'zipcode','mecity','city','IsNew','condition','Remod','view','grade','floors',  'TotalRooms') # 가져갈 변수
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated') #제거할 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
X_test <- model.matrix(~.-1, data = cbind(X_test_num, k_all[is.na(k_all$price), cat_vars, with=F]))
Y_train <- log(k_all[!is.na(k_all$price), price])
RMSE_exp <- function (data, lev = NULL, model = NULL) {
out <- sqrt(mean((exp(data$obs) - exp(data$pred))^2))
names(out) <- "RMSE_exp"
out
}
set.seed(0418)
k_control <- trainControl(method = 'cv', number = 5, summaryFunction = RMSE_exp)
tuneGrid <- expand.grid(alpha = 1, lambda = c(0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1))
fit.lasso <- train(x = as.matrix(X_train), y= Y_train,
method = 'glmnet',
metric = 'RMSE',
maximize = FALSE,
trControl = k_control,
tuneGrid = tuneGrid)
fit.lasso
fit.lasso$bestTune
min(fit.lasso$results$RMSE_exp)
lasso.varimp <- varImp(fit.lasso, scale = F)
lasso.imp <- lasso.varimp$importance
lasso.importance <- data.frame(variable = rownames(lasso.imp), importance = lasso.imp$Overall) %>%
arrange((importance))
lasso.importance$variable <- factor(lasso.importance$variable, levels = lasso.importance$variable, labels = lasso.importance$variable)
num.vars.selected <- length(which(lasso.importance$importance!=0))
num.vars.not.selected <- length(which(lasso.importance$importance==0))
cat('Lasso uses', num.vars.selected, 'variables in its model, and did not select', num.vars.not.selected, 'variables')
lasso.importance[which(lasso.importance$importance!=0),] %>%
ggplot(aes(x=variable, y=importance, fill=variable)) +
geom_bar(alpha=0.5, stat='identity') +
coord_flip() + # 가로 barplot
theme_light() + theme(legend.position = "none")
as.character(lasso.importance$variable[which(lasso.importance$importance==0)])
predictions_lasso <- exp(predict(fit.lasso, X_test))
head(predictions_lasso)
submission_lasso <- read.csv('./kako 2nd/sample_submission.csv')
write.csv(submission_lasso, file = 'submission_lasso.csv', row.names = F)
tuneGrid <- expand.grid(
max_depth = c(6, 60),  #default: 6
subsample = c(0.8, 1), #default: 1
colsample_bytree = c(0.9, 1) #default: 1
)
RMSE_exp <- function(preds, dtrain) {
labels <- xgboost::getinfo(dtrain, 'label')
err <- sqrt(mean((exp(labels) -exp(preds))^2))
return(list(metric = 'RMSE_exp', value = err))
}
# Dmatrix로 testing & training data 분리
dtrain <- xgb.DMatrix(data = as.matrix(X_train), label = Y_train)
dtest <- xgb.DMatrix(data = as.matrix(X_test))
results <- list(val_rmse = rep(0, nrow(tuneGrid)),
nrounds = rep(0, nrow(tuneGrid)))
for ( i in 1:nrow(tuneGrid)){
params <- list(
objective = 'reg:linear',
metric = 'rmse',
booster = 'gbtree',
eta = 0.01, #default: 0.3
gamma = 0,  #default: 0
min_child_weight =1, #default: 1
max_depth = tuneGrid[i, 'max_depth'],
subsample = tuneGrid[i, 'subsample'],
colsample_bytree = tuneGrid[i, 'colsample_bytree']
)
}
# tic('xgbcv')
xgbcv <- xgb.cv(params = params,
data = dtrain,
nrounds = 10000,
nfold = 5,
feval = RMSE_exp,
print_every_n = 100,
early_stopping_rounds = 100,
maximize = F,
seed=4018)
# toc()
results[['val_rmse']][i] <- unlist(xgbcv$evaluation_log[xgbcv$best_iteration, 'test_RMSE_exp_mean'])
results[['nrounds']][i] <- xgbcv$best_iteration
min.index <- which.min(results[['val_rmse']])
tuneGrid[min.index,]
cbind(tuneGrid, RMSE = unlist(results[['val_rmse']]))
default_param <- list(objective = 'reg:linear',
booster = 'gbtree',
eta = 0.01,
gamma = 0,
min_child_weight = 1,
max_depth         = tuneGrid[min.index, "max_depth"],
subsample         = tuneGrid[min.index, "subsample"],
colsample_bytree  = tuneGrid[min.index, "colsample_bytree"]
)
fit.xgb <- xgb.train(data=dtrain,
params = default_param,
nrounds = results[['nrounds']][min.index],
seed = 4018)
predictions_xgb <- predict(fit.xgb, dtest)
head(predictions_xgb)
predictions_xgb <- exp(predict(fit.xgb, dtest))
head(predictions_xgb)
submission_xgb <- read.csv('./kako 2nd/sample_submission.csv')
submission_xgb$price <- predictions_xgb
write.csv(submission_xgb, file = 'submission_xgb.csv', row.names = F)
k_sub.avg <- data.frame(ID=k_test.labels, price = (predictions_xgb + 2*predictions_lasso)/3)
head(k_sub.avg)
write.csv(k_sub.avg, file = 'LassoEnsemble_average.csv', row.names = F)
k_sub.avg <- data.frame(ID=k_test.labels, price = (2*predictions_xgb + predictions_lasso)/3)
head(k_sub.avg)
write.csv(k_sub.avg, file = 'XGBoostEnsemble_average.csv', row.names = F)
k_all6=k_all
dropVars <- c('zipcode')
k_all <- k_all %>% select(-dropVars)
cat_vars <- c('waterfront', 'Yrmbuy','mecity','city','IsNew','condition','Remod','view','grade','floors',  'TotalRooms') # 가져갈 변수
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated') #제거할 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
X_test <- model.matrix(~.-1, data = cbind(X_test_num, k_all[is.na(k_all$price), cat_vars, with=F]))
Y_train <- log(k_all[!is.na(k_all$price), price])
RMSE_exp <- function (data, lev = NULL, model = NULL) {
out <- sqrt(mean((exp(data$obs) - exp(data$pred))^2))
names(out) <- "RMSE_exp"
out
}
set.seed(0418)
k_control <- trainControl(method = 'cv', number = 5, summaryFunction = RMSE_exp)
tuneGrid <- expand.grid(alpha = 1, lambda = c(0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1))
fit.lasso <- train(x = as.matrix(X_train), y= Y_train,
method = 'glmnet',
metric = 'RMSE',
maximize = FALSE,
trControl = k_control,
tuneGrid = tuneGrid)
fit.lasso
fit.lasso$bestTune
min(fit.lasso$results$RMSE_exp)
cat_vars <- c('waterfront', 'Yrmbuy','zipcode','mecity','city','IsNew','condition','Remod','view','grade','floors',  'TotalRooms') # 가져갈 변수
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated') #제거할 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
k_all=k_all6
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
X_test <- model.matrix(~.-1, data = cbind(X_test_num, k_all[is.na(k_all$price), cat_vars, with=F]))
Y_train <- log(k_all[!is.na(k_all$price), price])
RMSE_exp <- function (data, lev = NULL, model = NULL) {
out <- sqrt(mean((exp(data$obs) - exp(data$pred))^2))
names(out) <- "RMSE_exp"
out
}
set.seed(0418)
k_control <- trainControl(method = 'cv', number = 5, summaryFunction = RMSE_exp)
tuneGrid <- expand.grid(alpha = 1, lambda = c(0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1))
fit.lasso <- train(x = as.matrix(X_train), y= Y_train,
method = 'glmnet',
metric = 'RMSE',
maximize = FALSE,
trControl = k_control,
tuneGrid = tuneGrid)
fit.lasso
fit.lasso$bestTune
min(fit.lasso$results$RMSE_exp)
library(shiny)
k_all6=k_all
k_all <- left_join(k_all, livingp, by = 'zipcode') %>% as.data.table
str(k_all)
cat_vars <- c('waterfront', 'Yrmbuy','zipcode','mecity','city','IsNew','condition','Remod','view','grade','floors',  'TotalRooms') # 가져갈 변수
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated') #제거할 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
X_test <- model.matrix(~.-1, data = cbind(X_test_num, k_all[is.na(k_all$price), cat_vars, with=F]))
Y_train <- log(k_all[!is.na(k_all$price), price])
RMSE_exp <- function (data, lev = NULL, model = NULL) {
out <- sqrt(mean((exp(data$obs) - exp(data$pred))^2))
names(out) <- "RMSE_exp"
out
}
set.seed(0418)
k_control <- trainControl(method = 'cv', number = 5, summaryFunction = RMSE_exp)
tuneGrid <- expand.grid(alpha = 1, lambda = c(0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1))
fit.lasso <- train(x = as.matrix(X_train), y= Y_train,
method = 'glmnet',
metric = 'RMSE',
maximize = FALSE,
trControl = k_control,
tuneGrid = tuneGrid)
fit.lasso
fit.lasso$bestTune
min(fit.lasso$results$RMSE_exp)
summarise(k_all)
summary(K_all)
summary(k_all)
View(k_all)
library(leaflet)
leaflet(k_all) %>%
setView(lng=long, lat=lat, zoom=10) %>%
addTiles() %>%
addCircles(lng = ~long, lat = ~lat)
library(ggamp)
library(ggmap)
gc <- geocode('Seattle')
register_google(key='AIzaSyCV6rC74F7uYUZaUL8peWztvOet0u4aGo8')
gc <- geocode('Seattle')
ggmap(get_map(location='America',zoom=10))
ggmap(get_map(location='USA',zoom=10))
ggmap(get_map(location='United states',zoom=10))
map <- map_data('k_all')
k <- ggplot(k_all, aes(fill = price))
k+geom_map(aes(map_id=city), map = k_all) +expand_limits(x = k_all$long, y= k_all$lat)
map <- map_data(k_all$long, k_all$lat)
mp <- k_all$long, k_all$lat
mp <- map(k_all$long, k_all$lat)
View(gc)
error
Shit!!!!
library(ggmap)
ggmap(get_map(location='USA',zoom=10))
ggmap(get_map(location='United States',zoom=10))
ggmap(get_map(location='American',zoom=10))
ggmap(get_map(location='United States America',zoom=10))
map <- map_data('k_all')
mp <- k_all$long, k_all$lat
..
error
what the
shit!!!!
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
lasso.importance[which(lasso.importance$importance!=0),] %>%
ggplot(aes(x=variable, y=importance, fill=variable)) +
geom_bar(alpha=0.5, stat='identity') +
coord_flip() + # 가로 barplot
theme_light() + theme(legend.position = "none")
lasso.importance[which(lasso.importance$importance!=0),] %>% ggplot(aes(x=variable, y=importance, fill=variable)) +
geom_bar(alpha=0.5, stat='identity') +
coord_flip() + # 가로 barplot
theme_light() + theme(legend.position = "none")
lasso.importance[which(lasso.importance$importance!=0),] %>%
ggplot(aes(x=variable, y=importance, fill=variable)) +
geom_bar(alpha=0.5, stat='identity') +
coord_flip() + # 가로 barplot
theme_light() + theme(legend.position = "none")
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated', 'zipcode') #제거할 변수
cat_vars <- c('waterfront', 'Yrmbuy','mecity','city','IsNew','condition','Remod','view','grade','floors',  'TotalRooms') # 가져갈 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
X_test <- model.matrix(~.-1, data = cbind(X_test_num, k_all[is.na(k_all$price), cat_vars, with=F]))
Y_train <- log(k_all[!is.na(k_all$price), price])
RMSE_exp <- function (data, lev = NULL, model = NULL) {
out <- sqrt(mean((exp(data$obs) - exp(data$pred))^2))
names(out) <- "RMSE_exp"
out
}
tic('LASSO')
library(tidyverse)   # ggplot2, dplyr, tidyr, tibble, readr 외 다양한 패키지가 있는 복합 패키지
library(corrplot)    # 시각화 사용(상관 계수 파악)
library(data.table)  # data Load
library(plotly)      # price 변수 인터랙티브 그래프 확인
library(scales)      # 그래프 축 수치 변경
library(gridExtra)   # 차트 멀티 표현
library(Rmisc)       # multiplot
library(zipcode)     # zipcode to city 변환
library(ggiraphExtra)# 지도 매핑 & 시각화
library(psych)       # Skewness
library(caret)       # preProcess
library(summarytools)# summary & 내용 개요
library(xgboost)     # xgboost model
library(tictoc)      # tic 함수
tic('LASSO')
set.seed(0418)
k_control <- trainControl(method = 'cv', number = 5, summaryFunction = RMSE_exp)
tuneGrid <- expand.grid(alpha = 1, lambda = c(0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1))
fit.lasso <- train(x = as.matrix(X_train), y= Y_train,
method = 'glmnet',
metric = 'RMSE',
maximize = FALSE,
trControl = k_control,
tuneGrid = tuneGrid)
toc()
fit.lasso
fit.lasso$bestTune
min(fit.lasso$results$RMSE_exp)
lasso.varimp <- varImp(fit.lasso, scale = F)
lasso.varimp <- varImp(fit.lasso, scale = F)
lasso.imp <- lasso.varimp$importance
lasso.importance <- data.frame(variable = rownames(lasso.imp), importance = lasso.imp$Overall) %>%
arrange((importance))
lasso.importance$variable <- factor(lasso.importance$variable, levels = lasso.importance$variable, labels = lasso.importance$variable)
num.vars.selected <- length(which(lasso.importance$importance!=0))
num.vars.not.selected <- length(which(lasso.importance$importance==0))
cat('Lasso uses', num.vars.selected, 'variables in its model, and did not select', num.vars.not.selected, 'variables')
lasso.importance[which(lasso.importance$importance!=0),] %>%
ggplot(aes(x=variable, y=importance, fill=variable)) +
geom_bar(alpha=0.5, stat='identity') +
coord_flip() + # 가로 barplot
theme_light() + theme(legend.position = "none")
as.character(lasso.importance$variable[which(lasso.importance$importance==0)])
lasso.importance[which(lasso.importance$importance!=0),] %>%
ggplot(aes(x=variable, y=importance, fill=variable)) +
geom_bar(alpha=0.5, stat='identity') +
coord_flip() + # 가로 barplot
theme_light() + theme(legend.position = "none")
cat_vars <- c('waterfront', 'Yrmbuy','mecity','city','IsNew','condition','Remod','view','grade','floors') # 가져갈 변수
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated', 'zipcode') #제거할 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
cat_vars <- c('waterfront', 'Yrmbuy','mecity','city','IsNew','condition','Remod','view','grade','floors') # 가져갈 변수
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated', 'zipcode', 'TotalRooms') #제거할 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
X_test <- model.matrix(~.-1, data = cbind(X_test_num, k_all[is.na(k_all$price), cat_vars, with=F]))
Y_train <- log(k_all[!is.na(k_all$price), price])
RMSE_exp <- function (data, lev = NULL, model = NULL) {
out <- sqrt(mean((exp(data$obs) - exp(data$pred))^2))
names(out) <- "RMSE_exp"
out
}
tic('LASSO')
set.seed(0418)
k_control <- trainControl(method = 'cv', number = 5, summaryFunction = RMSE_exp)
tuneGrid <- expand.grid(alpha = 1, lambda = c(0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1))
fit.lasso <- train(x = as.matrix(X_train), y= Y_train,
method = 'glmnet',
metric = 'RMSE',
maximize = FALSE,
trControl = k_control,
tuneGrid = tuneGrid)
toc()
fit.lasso
fit.lasso$bestTune
min(fit.lasso$results$RMSE_exp)
lasso.varimp <- varImp(fit.lasso, scale = F)
lasso.imp <- lasso.varimp$importance
lasso.importance <- data.frame(variable = rownames(lasso.imp), importance = lasso.imp$Overall) %>%
arrange((importance))
lasso.importance$variable <- factor(lasso.importance$variable, levels = lasso.importance$variable, labels = lasso.importance$variable)
num.vars.selected <- length(which(lasso.importance$importance!=0))
num.vars.not.selected <- length(which(lasso.importance$importance==0))
cat('Lasso uses', num.vars.selected, 'variables in its model, and did not select', num.vars.not.selected, 'variables')
lasso.importance[which(lasso.importance$importance!=0),] %>%
ggplot(aes(x=variable, y=importance, fill=variable)) +
geom_bar(alpha=0.5, stat='identity') +
coord_flip() + # 가로 barplot
theme_light() + theme(legend.position = "none")
cat_vars <- c('waterfront', 'Yrmbuy','mecity','city','IsNew','condition','Remod','view','grade','floors', 'zipcode', 'TotalRooms') # 가져갈 변수
del_vars <- c('price','Yrbuy','Mobuy','date', 'yr_built','bathrooms','bedrooms','yr_renovated') #제거할 변수
num_vars <- setdiff(colnames(k_all), c(cat_vars, del_vars))  #del_var 제외 변수 추출
# 수치형 변수 표준화
X_train_num <- k_all[!is.na(k_all$price), num_vars, with=F]
X_test_num <- k_all[is.na(k_all$price), num_vars, with=F]
mean.tr <- apply(X_train_num, 2, mean)
sd.tr <- apply(X_train_num, 2, sd)
X_train_num <- scale(X_train_num, center = mean.tr, scale = sd.tr)
X_test_num <- scale(X_test_num, center = mean.tr, scale = sd.tr)
X_train <- model.matrix(~.-1, data=cbind(X_train_num, k_all[!is.na(k_all$price), cat_vars, with=F]))
X_test <- model.matrix(~.-1, data = cbind(X_test_num, k_all[is.na(k_all$price), cat_vars, with=F]))
Y_train <- log(k_all[!is.na(k_all$price), price])
RMSE_exp <- function (data, lev = NULL, model = NULL) {
out <- sqrt(mean((exp(data$obs) - exp(data$pred))^2))
names(out) <- "RMSE_exp"
out
}
tic('LASSO')
set.seed(0418)
k_control <- trainControl(method = 'cv', number = 5, summaryFunction = RMSE_exp)
tuneGrid <- expand.grid(alpha = 1, lambda = c(0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1))
fit.lasso <- train(x = as.matrix(X_train), y= Y_train,
method = 'glmnet',
metric = 'RMSE',
maximize = FALSE,
trControl = k_control,
tuneGrid = tuneGrid)
toc()
fit.lasso
fit.lasso$bestTune
min(fit.lasso$results$RMSE_exp)
lasso.varimp <- varImp(fit.lasso, scale = F)
lasso.imp <- lasso.varimp$importance
lasso.importance <- data.frame(variable = rownames(lasso.imp), importance = lasso.imp$Overall) %>%
arrange((importance))
lasso.importance$variable <- factor(lasso.importance$variable, levels = lasso.importance$variable, labels = lasso.importance$variable)
num.vars.selected <- length(which(lasso.importance$importance!=0))
num.vars.not.selected <- length(which(lasso.importance$importance==0))
cat('Lasso uses', num.vars.selected, 'variables in its model, and did not select', num.vars.not.selected, 'variables')
lasso.importance[which(lasso.importance$importance!=0),] %>%
ggplot(aes(x=variable, y=importance, fill=variable)) +
geom_bar(alpha=0.5, stat='identity') +
coord_flip() + # 가로 barplot
theme_light() + theme(legend.position = "none")
install.packages('tidyverse')
library(tidyverse)
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
```{r}
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(tidyverse)   # ggplot2, dplyr, tidyr, tibble, readr 외 다양한 패키지가 있는 복합 패키지
library(corrplot)    # 시각화 사용(상관 계수 파악)
library(data.table)  # data Load
library(plotly)      # price 변수 인터랙티브 그래프 확인
library(scales)      # 그래프 축 수치 변경
library(gridExtra)   # 차트 멀티 표현
library(Rmisc)       # multiplot
library(zipcode)     # zipcode to city 변환
library(ggiraphExtra)# 지도 매핑 & 시각화
library(psych)       # Skewness
library(caret)       # preProcess
library(summarytools)# summary & 내용 개요
library(xgboost)     # xgboost model
library(tictoc)      # tic 함수
